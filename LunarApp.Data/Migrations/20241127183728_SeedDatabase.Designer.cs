// <auto-generated />
using System;
using LunarApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LunarApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241127183728_SeedDatabase")]
    partial class SeedDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LunarApp.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LunarApp.Data.Models.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Folder Identifier");

                    b.Property<string>("Description")
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Folder description");

                    b.Property<Guid>("NotebookId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of a notebook");

                    b.Property<Guid?>("ParentFolderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of a parent folder");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Folder title");

                    b.HasKey("Id");

                    b.HasIndex("NotebookId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("84aebc41-d5cc-47ab-8f11-97855f3c2867"),
                            Description = "Links to useful software engineering resources.",
                            NotebookId = new Guid("720bd9c9-fbf2-461d-bd6b-64ed03eba3e1"),
                            Title = "Resources"
                        },
                        new
                        {
                            Id = new Guid("79f0d3f6-5b36-4f41-946c-6b8cab49decd"),
                            Description = "Quick access to reusable code.",
                            NotebookId = new Guid("720bd9c9-fbf2-461d-bd6b-64ed03eba3e1"),
                            Title = "Code Snippets"
                        },
                        new
                        {
                            Id = new Guid("2bbbf65b-7b94-477e-89c8-0efacf17955c"),
                            Description = "A collection of music samples for production.",
                            NotebookId = new Guid("d8ce68d6-f596-4670-9dd4-73c707a902cc"),
                            Title = "Samples"
                        },
                        new
                        {
                            Id = new Guid("22c0b5d6-7d91-4a3d-9472-31871d581104"),
                            Description = "Tutorials on video editing techniques.",
                            NotebookId = new Guid("4d42eb54-4281-44e7-ac9c-cebaa8fc3599"),
                            Title = "Techniques"
                        },
                        new
                        {
                            Id = new Guid("46cd0253-1475-4421-a3a2-7bbba61af78e"),
                            Description = "Track personal development goals.",
                            NotebookId = new Guid("1ed79ae8-b8ae-471f-9654-575a6d8ce605"),
                            Title = "Goals"
                        },
                        new
                        {
                            Id = new Guid("5f07bccd-9bbf-470e-8b65-d07695f5e593"),
                            Description = "Ideas for future stories or poems.",
                            NotebookId = new Guid("e5904304-a51b-4b34-a302-20f2abc98c4f"),
                            Title = "Ideas"
                        });
                });

            modelBuilder.Entity("LunarApp.Data.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Note Identifier");

                    b.Property<string>("Body")
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Note body");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("The date the note was created on");

                    b.Property<Guid?>("FolderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of a folder");

                    b.Property<DateTime>("LastSaved")
                        .HasColumnType("datetime2")
                        .HasComment("The date the note was last saved on");

                    b.Property<Guid>("NotebookId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of a notebook");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Note title");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("NotebookId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef1dd281-ff79-4a8a-bfbc-a4182a8e7ed1"),
                            Body = "Notes on various software design patterns, including Singleton, Factory, and Observer.",
                            DateCreated = new DateTime(2024, 11, 27, 20, 37, 28, 186, DateTimeKind.Local).AddTicks(6814),
                            FolderId = new Guid("79f0d3f6-5b36-4f41-946c-6b8cab49decd"),
                            LastSaved = new DateTime(2024, 11, 27, 20, 37, 28, 186, DateTimeKind.Local).AddTicks(6864),
                            NotebookId = new Guid("720bd9c9-fbf2-461d-bd6b-64ed03eba3e1"),
                            Title = "Design Patterns"
                        },
                        new
                        {
                            Id = new Guid("8adb0ab3-de9d-4306-9df7-98ab07bc97d8"),
                            Body = "Techniques for mixing tracks in a DAW, with focus on EQ and compression.",
                            DateCreated = new DateTime(2024, 11, 27, 20, 37, 28, 186, DateTimeKind.Local).AddTicks(6869),
                            FolderId = new Guid("2bbbf65b-7b94-477e-89c8-0efacf17955c"),
                            LastSaved = new DateTime(2024, 11, 27, 20, 37, 28, 186, DateTimeKind.Local).AddTicks(6871),
                            NotebookId = new Guid("d8ce68d6-f596-4670-9dd4-73c707a902cc"),
                            Title = "Mixing Tips"
                        },
                        new
                        {
                            Id = new Guid("cca1d0ee-e770-4a11-a831-39d6e0552ccd"),
                            Body = "A guide to color grading for video editors using different software.",
                            DateCreated = new DateTime(2024, 11, 27, 20, 37, 28, 186, DateTimeKind.Local).AddTicks(6874),
                            FolderId = new Guid("22c0b5d6-7d91-4a3d-9472-31871d581104"),
                            LastSaved = new DateTime(2024, 11, 27, 20, 37, 28, 186, DateTimeKind.Local).AddTicks(6875),
                            NotebookId = new Guid("4d42eb54-4281-44e7-ac9c-cebaa8fc3599"),
                            Title = "Color Grading Techniques"
                        },
                        new
                        {
                            Id = new Guid("41f96f39-2a4c-4f53-a060-a04db665eccb"),
                            Body = "A step-by-step guide to an effective morning routine to start the day right.",
                            DateCreated = new DateTime(2024, 11, 27, 20, 37, 28, 186, DateTimeKind.Local).AddTicks(6878),
                            FolderId = new Guid("46cd0253-1475-4421-a3a2-7bbba61af78e"),
                            LastSaved = new DateTime(2024, 11, 27, 20, 37, 28, 186, DateTimeKind.Local).AddTicks(6879),
                            NotebookId = new Guid("1ed79ae8-b8ae-471f-9654-575a6d8ce605"),
                            Title = "Morning Routine"
                        },
                        new
                        {
                            Id = new Guid("94705b4b-df53-4cad-9609-866f87dc28a1"),
                            Body = "Techniques for creating deep, multi-dimensional characters in fiction.",
                            DateCreated = new DateTime(2024, 11, 27, 20, 37, 28, 186, DateTimeKind.Local).AddTicks(6881),
                            FolderId = new Guid("5f07bccd-9bbf-470e-8b65-d07695f5e593"),
                            LastSaved = new DateTime(2024, 11, 27, 20, 37, 28, 186, DateTimeKind.Local).AddTicks(6883),
                            NotebookId = new Guid("e5904304-a51b-4b34-a302-20f2abc98c4f"),
                            Title = "Character Development"
                        });
                });

            modelBuilder.Entity("LunarApp.Data.Models.Notebook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Notebook Identifier");

                    b.Property<string>("Description")
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Notebook description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Notebook title");

                    b.HasKey("Id");

                    b.ToTable("Notebooks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("720bd9c9-fbf2-461d-bd6b-64ed03eba3e1"),
                            Description = "A notebook for all things software development.",
                            Title = "Software Engineering"
                        },
                        new
                        {
                            Id = new Guid("d8ce68d6-f596-4670-9dd4-73c707a902cc"),
                            Description = "For all music production-related notes.",
                            Title = "Music Production"
                        },
                        new
                        {
                            Id = new Guid("4d42eb54-4281-44e7-ac9c-cebaa8fc3599"),
                            Description = "Notes on video editing, techniques, and tutorials.",
                            Title = "Video Editing"
                        },
                        new
                        {
                            Id = new Guid("1ed79ae8-b8ae-471f-9654-575a6d8ce605"),
                            Description = "A place for goals, self-improvement tips, and productivity hacks.",
                            Title = "Personal Development"
                        },
                        new
                        {
                            Id = new Guid("e5904304-a51b-4b34-a302-20f2abc98c4f"),
                            Description = "A notebook for stories, poetry, and creative writing ideas.",
                            Title = "Creative Writing"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LunarApp.Data.Models.Folder", b =>
                {
                    b.HasOne("LunarApp.Data.Models.Notebook", "Notebook")
                        .WithMany("Folders")
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LunarApp.Data.Models.Folder", "ParentFolder")
                        .WithMany("ChildrenFolders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Notebook");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("LunarApp.Data.Models.Note", b =>
                {
                    b.HasOne("LunarApp.Data.Models.Folder", "Folder")
                        .WithMany("Notes")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunarApp.Data.Models.Notebook", "Notebook")
                        .WithMany("Notes")
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("Notebook");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LunarApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LunarApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LunarApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LunarApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LunarApp.Data.Models.Folder", b =>
                {
                    b.Navigation("ChildrenFolders");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("LunarApp.Data.Models.Notebook", b =>
                {
                    b.Navigation("Folders");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}

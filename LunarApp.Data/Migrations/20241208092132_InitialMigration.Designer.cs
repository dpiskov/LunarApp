// <auto-generated />
using System;
using LunarApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LunarApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241208092132_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LunarApp.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LunarApp.Data.Models.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Folder Identifier");

                    b.Property<string>("Description")
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Folder description");

                    b.Property<Guid>("NotebookId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of a notebook");

                    b.Property<Guid?>("ParentFolderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of a parent folder");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Folder title");

                    b.HasKey("Id");

                    b.HasIndex("NotebookId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("617fd59e-c7f6-4e90-a9ca-d9b6cfc61bce"),
                            Description = "Links to useful software engineering resources.",
                            NotebookId = new Guid("e36ef31b-16d9-40d6-a336-0dadb73ee706"),
                            Title = "Resources"
                        },
                        new
                        {
                            Id = new Guid("a4009323-ffde-4dde-898a-c63a1a31c000"),
                            Description = "Quick access to reusable code.",
                            NotebookId = new Guid("e36ef31b-16d9-40d6-a336-0dadb73ee706"),
                            Title = "Code Snippets"
                        },
                        new
                        {
                            Id = new Guid("d9c92c27-b608-48e2-bb8e-790e333020f2"),
                            Description = "A collection of music samples for production.",
                            NotebookId = new Guid("e3e6aa3b-c280-4005-8fb2-14c4cdcf6425"),
                            Title = "Samples"
                        },
                        new
                        {
                            Id = new Guid("9a2143ce-86da-4450-8c21-aca5ca0becfb"),
                            Description = "Tutorials on video editing techniques.",
                            NotebookId = new Guid("c1052546-dad1-4569-aa20-4d31db57af81"),
                            Title = "Techniques"
                        },
                        new
                        {
                            Id = new Guid("1f5c5793-2e19-4f9d-adc8-b1c750666336"),
                            Description = "Track personal development goals.",
                            NotebookId = new Guid("a5b9e3e5-c41a-40c2-9068-b4ff72fc585b"),
                            Title = "Goals"
                        },
                        new
                        {
                            Id = new Guid("9005ce81-b076-4a8f-a56e-c9ef43e11021"),
                            Description = "Ideas for future stories or poems.",
                            NotebookId = new Guid("92bda610-1b12-4a0a-b12b-5e11aa47c008"),
                            Title = "Ideas"
                        });
                });

            modelBuilder.Entity("LunarApp.Data.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Note Identifier");

                    b.Property<string>("Body")
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Note body");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("The date the note was created on");

                    b.Property<Guid?>("FolderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of a folder");

                    b.Property<DateTime>("LastSaved")
                        .HasColumnType("datetime2")
                        .HasComment("The date the note was last saved on");

                    b.Property<Guid>("NotebookId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of a notebook");

                    b.Property<Guid?>("ParentFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of a tag");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Note title");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("NotebookId");

                    b.HasIndex("ParentFolderId");

                    b.HasIndex("TagId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6416fd93-8446-4359-bf1b-06bbe9935a47"),
                            Body = "Notes on various software design patterns, including Singleton, Factory, and Observer.",
                            DateCreated = new DateTime(2024, 12, 8, 11, 21, 31, 965, DateTimeKind.Local).AddTicks(5025),
                            FolderId = new Guid("a4009323-ffde-4dde-898a-c63a1a31c000"),
                            LastSaved = new DateTime(2024, 12, 8, 11, 21, 31, 965, DateTimeKind.Local).AddTicks(5080),
                            NotebookId = new Guid("e36ef31b-16d9-40d6-a336-0dadb73ee706"),
                            Title = "Design Patterns"
                        },
                        new
                        {
                            Id = new Guid("92a20920-197f-4f8e-8e71-1679ef7317a0"),
                            Body = "Techniques for mixing tracks in a DAW, with focus on EQ and compression.",
                            DateCreated = new DateTime(2024, 12, 8, 11, 21, 31, 965, DateTimeKind.Local).AddTicks(5084),
                            FolderId = new Guid("d9c92c27-b608-48e2-bb8e-790e333020f2"),
                            LastSaved = new DateTime(2024, 12, 8, 11, 21, 31, 965, DateTimeKind.Local).AddTicks(5085),
                            NotebookId = new Guid("e3e6aa3b-c280-4005-8fb2-14c4cdcf6425"),
                            Title = "Mixing Tips"
                        },
                        new
                        {
                            Id = new Guid("28702685-e6f8-4829-a937-a3b41d722c77"),
                            Body = "A guide to color grading for video editors using different software.",
                            DateCreated = new DateTime(2024, 12, 8, 11, 21, 31, 965, DateTimeKind.Local).AddTicks(5088),
                            FolderId = new Guid("9a2143ce-86da-4450-8c21-aca5ca0becfb"),
                            LastSaved = new DateTime(2024, 12, 8, 11, 21, 31, 965, DateTimeKind.Local).AddTicks(5089),
                            NotebookId = new Guid("c1052546-dad1-4569-aa20-4d31db57af81"),
                            Title = "Color Grading Techniques"
                        },
                        new
                        {
                            Id = new Guid("10966e78-2493-4ef6-96f0-0be25980bc15"),
                            Body = "A step-by-step guide to an effective morning routine to start the day right.",
                            DateCreated = new DateTime(2024, 12, 8, 11, 21, 31, 965, DateTimeKind.Local).AddTicks(5093),
                            FolderId = new Guid("1f5c5793-2e19-4f9d-adc8-b1c750666336"),
                            LastSaved = new DateTime(2024, 12, 8, 11, 21, 31, 965, DateTimeKind.Local).AddTicks(5094),
                            NotebookId = new Guid("a5b9e3e5-c41a-40c2-9068-b4ff72fc585b"),
                            Title = "Morning Routine"
                        },
                        new
                        {
                            Id = new Guid("508fe25d-73f5-41be-9bcf-6cf8777d57b5"),
                            Body = "Techniques for creating deep, multi-dimensional characters in fiction.",
                            DateCreated = new DateTime(2024, 12, 8, 11, 21, 31, 965, DateTimeKind.Local).AddTicks(5097),
                            FolderId = new Guid("9005ce81-b076-4a8f-a56e-c9ef43e11021"),
                            LastSaved = new DateTime(2024, 12, 8, 11, 21, 31, 965, DateTimeKind.Local).AddTicks(5098),
                            NotebookId = new Guid("92bda610-1b12-4a0a-b12b-5e11aa47c008"),
                            Title = "Character Development"
                        });
                });

            modelBuilder.Entity("LunarApp.Data.Models.Notebook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Notebook Identifier");

                    b.Property<string>("Description")
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Notebook description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Notebook title");

                    b.HasKey("Id");

                    b.ToTable("Notebooks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e36ef31b-16d9-40d6-a336-0dadb73ee706"),
                            Description = "A notebook for all things software development.",
                            Title = "Software Engineering"
                        },
                        new
                        {
                            Id = new Guid("e3e6aa3b-c280-4005-8fb2-14c4cdcf6425"),
                            Description = "For all music production-related notes.",
                            Title = "Music Production"
                        },
                        new
                        {
                            Id = new Guid("c1052546-dad1-4569-aa20-4d31db57af81"),
                            Description = "Notes on video editing, techniques, and tutorials.",
                            Title = "Video Editing"
                        },
                        new
                        {
                            Id = new Guid("a5b9e3e5-c41a-40c2-9068-b4ff72fc585b"),
                            Description = "A place for goals, self-improvement tips, and productivity hacks.",
                            Title = "Personal Development"
                        },
                        new
                        {
                            Id = new Guid("92bda610-1b12-4a0a-b12b-5e11aa47c008"),
                            Description = "A notebook for stories, poetry, and creative writing ideas.",
                            Title = "Creative Writing"
                        });
                });

            modelBuilder.Entity("LunarApp.Data.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Tag Identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Tag name");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67d6c49b-f33f-4e50-87bd-fc76808f7bb9"),
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = new Guid("d70e52df-9509-4651-89b2-3f5c83553399"),
                            Name = "Important"
                        },
                        new
                        {
                            Id = new Guid("2626d426-58ee-4a83-9b61-826c7bd12b37"),
                            Name = "Not Urgent"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LunarApp.Data.Models.Folder", b =>
                {
                    b.HasOne("LunarApp.Data.Models.Notebook", "Notebook")
                        .WithMany("Folders")
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LunarApp.Data.Models.Folder", "ParentFolder")
                        .WithMany("ChildrenFolders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Notebook");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("LunarApp.Data.Models.Note", b =>
                {
                    b.HasOne("LunarApp.Data.Models.Folder", "Folder")
                        .WithMany("Notes")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunarApp.Data.Models.Notebook", "Notebook")
                        .WithMany("Notes")
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LunarApp.Data.Models.Folder", "ParentFolder")
                        .WithMany()
                        .HasForeignKey("ParentFolderId");

                    b.HasOne("LunarApp.Data.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.Navigation("Folder");

                    b.Navigation("Notebook");

                    b.Navigation("ParentFolder");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LunarApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LunarApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LunarApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LunarApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LunarApp.Data.Models.Folder", b =>
                {
                    b.Navigation("ChildrenFolders");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("LunarApp.Data.Models.Notebook", b =>
                {
                    b.Navigation("Folders");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}

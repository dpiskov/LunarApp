// <auto-generated />
using System;
using LunarApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LunarApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241203112841_AddedTagEntityModelAndSeedDatabase")]
    partial class AddedTagEntityModelAndSeedDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LunarApp.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LunarApp.Data.Models.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Folder Identifier");

                    b.Property<string>("Description")
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Folder description");

                    b.Property<Guid>("NotebookId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of a notebook");

                    b.Property<Guid?>("ParentFolderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of a parent folder");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Folder title");

                    b.HasKey("Id");

                    b.HasIndex("NotebookId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc909db1-0907-4241-a15e-85d8eb53cefc"),
                            Description = "Links to useful software engineering resources.",
                            NotebookId = new Guid("68140580-97ec-4543-bda7-5c899609a098"),
                            Title = "Resources"
                        },
                        new
                        {
                            Id = new Guid("0fc58ea1-fb37-47bd-821c-36073702f684"),
                            Description = "Quick access to reusable code.",
                            NotebookId = new Guid("68140580-97ec-4543-bda7-5c899609a098"),
                            Title = "Code Snippets"
                        },
                        new
                        {
                            Id = new Guid("faf44aa2-1e98-48ff-80d5-847b7b6e8b64"),
                            Description = "A collection of music samples for production.",
                            NotebookId = new Guid("a566461d-ebd6-4f09-9ba1-a979b2cbb6fd"),
                            Title = "Samples"
                        },
                        new
                        {
                            Id = new Guid("c8b1a27b-df7b-48c0-95dc-cdc811f57e41"),
                            Description = "Tutorials on video editing techniques.",
                            NotebookId = new Guid("4545e175-6a16-4c7d-8f1f-b87c2846e1aa"),
                            Title = "Techniques"
                        },
                        new
                        {
                            Id = new Guid("56044a58-7c4d-4248-b3b7-84dc0d94ab3f"),
                            Description = "Track personal development goals.",
                            NotebookId = new Guid("6f45feff-2f73-495d-9d09-0ec08a8b7ac8"),
                            Title = "Goals"
                        },
                        new
                        {
                            Id = new Guid("e8f5eafd-ad47-4080-8ec4-81473206e201"),
                            Description = "Ideas for future stories or poems.",
                            NotebookId = new Guid("17d0d13b-1c3e-4e29-a85e-ebd38cec944d"),
                            Title = "Ideas"
                        });
                });

            modelBuilder.Entity("LunarApp.Data.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Note Identifier");

                    b.Property<string>("Body")
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Note body");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("The date the note was created on");

                    b.Property<Guid?>("FolderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of a folder");

                    b.Property<DateTime>("LastSaved")
                        .HasColumnType("datetime2")
                        .HasComment("The date the note was last saved on");

                    b.Property<Guid>("NotebookId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of a notebook");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of a tag");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Note title");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("NotebookId");

                    b.HasIndex("TagId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b306fdc2-2943-41cb-b0fc-6b1f2842b6e9"),
                            Body = "Notes on various software design patterns, including Singleton, Factory, and Observer.",
                            DateCreated = new DateTime(2024, 12, 3, 13, 28, 41, 71, DateTimeKind.Local).AddTicks(9085),
                            FolderId = new Guid("0fc58ea1-fb37-47bd-821c-36073702f684"),
                            LastSaved = new DateTime(2024, 12, 3, 13, 28, 41, 71, DateTimeKind.Local).AddTicks(9129),
                            NotebookId = new Guid("68140580-97ec-4543-bda7-5c899609a098"),
                            Title = "Design Patterns"
                        },
                        new
                        {
                            Id = new Guid("7f5a5c1b-1a48-47d3-8f55-c0bf0ca8f396"),
                            Body = "Techniques for mixing tracks in a DAW, with focus on EQ and compression.",
                            DateCreated = new DateTime(2024, 12, 3, 13, 28, 41, 71, DateTimeKind.Local).AddTicks(9133),
                            FolderId = new Guid("faf44aa2-1e98-48ff-80d5-847b7b6e8b64"),
                            LastSaved = new DateTime(2024, 12, 3, 13, 28, 41, 71, DateTimeKind.Local).AddTicks(9134),
                            NotebookId = new Guid("a566461d-ebd6-4f09-9ba1-a979b2cbb6fd"),
                            Title = "Mixing Tips"
                        },
                        new
                        {
                            Id = new Guid("6f510028-6635-46bb-98e5-40533baaf488"),
                            Body = "A guide to color grading for video editors using different software.",
                            DateCreated = new DateTime(2024, 12, 3, 13, 28, 41, 71, DateTimeKind.Local).AddTicks(9137),
                            FolderId = new Guid("c8b1a27b-df7b-48c0-95dc-cdc811f57e41"),
                            LastSaved = new DateTime(2024, 12, 3, 13, 28, 41, 71, DateTimeKind.Local).AddTicks(9138),
                            NotebookId = new Guid("4545e175-6a16-4c7d-8f1f-b87c2846e1aa"),
                            Title = "Color Grading Techniques"
                        },
                        new
                        {
                            Id = new Guid("0cd87114-a7dd-4f7e-86c0-94186ddbddc5"),
                            Body = "A step-by-step guide to an effective morning routine to start the day right.",
                            DateCreated = new DateTime(2024, 12, 3, 13, 28, 41, 71, DateTimeKind.Local).AddTicks(9141),
                            FolderId = new Guid("56044a58-7c4d-4248-b3b7-84dc0d94ab3f"),
                            LastSaved = new DateTime(2024, 12, 3, 13, 28, 41, 71, DateTimeKind.Local).AddTicks(9142),
                            NotebookId = new Guid("6f45feff-2f73-495d-9d09-0ec08a8b7ac8"),
                            Title = "Morning Routine"
                        },
                        new
                        {
                            Id = new Guid("94934d02-525a-47b5-8f0c-c1fc63bd738d"),
                            Body = "Techniques for creating deep, multi-dimensional characters in fiction.",
                            DateCreated = new DateTime(2024, 12, 3, 13, 28, 41, 71, DateTimeKind.Local).AddTicks(9147),
                            FolderId = new Guid("e8f5eafd-ad47-4080-8ec4-81473206e201"),
                            LastSaved = new DateTime(2024, 12, 3, 13, 28, 41, 71, DateTimeKind.Local).AddTicks(9148),
                            NotebookId = new Guid("17d0d13b-1c3e-4e29-a85e-ebd38cec944d"),
                            Title = "Character Development"
                        });
                });

            modelBuilder.Entity("LunarApp.Data.Models.Notebook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Notebook Identifier");

                    b.Property<string>("Description")
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Notebook description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Notebook title");

                    b.HasKey("Id");

                    b.ToTable("Notebooks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68140580-97ec-4543-bda7-5c899609a098"),
                            Description = "A notebook for all things software development.",
                            Title = "Software Engineering"
                        },
                        new
                        {
                            Id = new Guid("a566461d-ebd6-4f09-9ba1-a979b2cbb6fd"),
                            Description = "For all music production-related notes.",
                            Title = "Music Production"
                        },
                        new
                        {
                            Id = new Guid("4545e175-6a16-4c7d-8f1f-b87c2846e1aa"),
                            Description = "Notes on video editing, techniques, and tutorials.",
                            Title = "Video Editing"
                        },
                        new
                        {
                            Id = new Guid("6f45feff-2f73-495d-9d09-0ec08a8b7ac8"),
                            Description = "A place for goals, self-improvement tips, and productivity hacks.",
                            Title = "Personal Development"
                        },
                        new
                        {
                            Id = new Guid("17d0d13b-1c3e-4e29-a85e-ebd38cec944d"),
                            Description = "A notebook for stories, poetry, and creative writing ideas.",
                            Title = "Creative Writing"
                        });
                });

            modelBuilder.Entity("LunarApp.Data.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Tag Identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Tag name");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("62f48b86-54b4-4c14-a81f-e6a734564921"),
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = new Guid("c21469f5-0620-4d87-9344-7779d15ada28"),
                            Name = "Important"
                        },
                        new
                        {
                            Id = new Guid("e6bd5210-227a-4646-9a3f-a8f79098bd7c"),
                            Name = "Not Urgent"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LunarApp.Data.Models.Folder", b =>
                {
                    b.HasOne("LunarApp.Data.Models.Notebook", "Notebook")
                        .WithMany("Folders")
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LunarApp.Data.Models.Folder", "ParentFolder")
                        .WithMany("ChildrenFolders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Notebook");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("LunarApp.Data.Models.Note", b =>
                {
                    b.HasOne("LunarApp.Data.Models.Folder", "Folder")
                        .WithMany("Notes")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunarApp.Data.Models.Notebook", "Notebook")
                        .WithMany("Notes")
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LunarApp.Data.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.Navigation("Folder");

                    b.Navigation("Notebook");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LunarApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LunarApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LunarApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LunarApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LunarApp.Data.Models.Folder", b =>
                {
                    b.Navigation("ChildrenFolders");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("LunarApp.Data.Models.Notebook", b =>
                {
                    b.Navigation("Folders");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
